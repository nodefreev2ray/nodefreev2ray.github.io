<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://nodefreev2ray.github.io/news/article-109399.htm" />
    <title>简单聊一聊Vue3组件更新过程_vue.js</title>
        <meta name="description" content="目录  前言 副作用渲染函数更新组件的过程 核心逻辑：patch流程  1.处理组件 2.处理普通元素  总结     前言 组件渲染的过程，本质上就是把各种把各种类型的 vnode 渲染成真实 DO" />
        <link rel="icon" href="/assets/website/img/nodefreev2ray/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="NodeFreeV2ray免费机场节点分享官网">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://nodefreev2ray.github.io/news/article-109399.htm" />
    <meta property="og:site_name" content="NodeFreeV2ray免费机场节点分享官网" />
    <meta property="og:title" content="简单聊一聊Vue3组件更新过程_vue.js" />
    <meta property="og:image" content="https://nodefreev2ray.github.io/uploads/20241210-1/7aa37c59adda616c27f68d258fcd7ef8.webp" />
        <meta property="og:release_date" content="2025-05-02T09:22:05" />
    <meta property="og:updated_time" content="2025-05-02T09:22:05" />
        <meta property="og:description" content="目录  前言 副作用渲染函数更新组件的过程 核心逻辑：patch流程  1.处理组件 2.处理普通元素  总结     前言 组件渲染的过程，本质上就是把各种把各种类型的 vnode 渲染成真实 DO" />
        
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="简单聊一聊Vue3组件更新过程_vue.js">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <link rel="stylesheet" href="/assets/website/css/nodefreev2ray/open-iconic-bootstrap.min.css">
    <link rel="stylesheet" href="/assets/website/css/nodefreev2ray/animate.css">
    <link rel="stylesheet" href="/assets/website/css/nodefreev2ray/owl.carousel.min.css">
    <link rel="stylesheet" href="/assets/website/css/nodefreev2ray/owl.theme.default.min.css">
    <link rel="stylesheet" href="/assets/website/css/nodefreev2ray/magnific-popup.css">
    <link rel="stylesheet" href="/assets/website/css/nodefreev2ray/aos.css">
    <link rel="stylesheet" href="/assets/website/css/nodefreev2ray/ionicons.min.css">
    <link rel="stylesheet" href="/assets/website/css/nodefreev2ray/bootstrap-datepicker.css">
    <link rel="stylesheet" href="/assets/website/css/nodefreev2ray/jquery.timepicker.css">
    <link rel="stylesheet" href="/assets/website/css/nodefreev2ray/flaticon.css">
    <link rel="stylesheet" href="/assets/website/css/nodefreev2ray/icomoon.css">
    <link rel="stylesheet" href="/assets/website/css/nodefreev2ray/style.css">
    <link rel="stylesheet" href="/assets/website/css/G.css" />
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-KW9CVM614F"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-KW9CVM614F');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body class="goto-here" data-page="detail">
        <nav class="navbar navbar-expand-lg navbar-dark ftco_navbar bg-dark ftco-navbar-light" id="ftco-navbar">
        <div class="container">
            <a class="navbar-brand" href="/">
                                <span>Node Free V2ray</span>
                            </a>
            <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#ftco-nav" aria-controls="ftco-nav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="oi oi-menu"></span> Menu
            </button>
            <div class="collapse navbar-collapse" id="ftco-nav">
                <ul class="navbar-nav ml-auto">
                                        <li class="nav-item"><a href="/" class="nav-link">首页</a></li>
                                        <li class="nav-item"><a href="/free-nodes/" class="nav-link">免费节点</a></li>
                                        <li class="nav-item"><a href="/paid-subscribe/" class="nav-link">推荐机场</a></li>
                                        <li class="nav-item"><a href="/client.htm" class="nav-link">客户端</a></li>
                                        <li class="nav-item"><a href="/news/" class="nav-link">新闻资讯</a></li>
                                    </ul>
            </div>
        </div>
    </nav>
    <!-- END nav -->
    <div class="hero-wrap hero-bread" style="background-image: url('/assets/website/img/nodefreev2ray/bg_6.jpg');">
        <div class="container">
            <div class="row no-gutters slider-text align-items-center justify-content-center">
                <div class="col-md-9 ftco-animate text-center">
                    <p class="breadcrumbs">
                        <span class="mr-2"><a href="/">首页</a></span>
                        <span class="mr-2"><a href="/news/">新闻资讯</a></span>
                        <span class="mr-2">正文</span>
                    </p>
                    <h1 class="mb-0 bread">简单聊一聊Vue3组件更新过程_vue.js</h1>
                </div>
            </div>
        </div>
    </div>
    <section class="ftco-section bg-light">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="Clash Meta免费节点订阅站" data-url="https://clash-meta.github.io">
                <div class="xcblog-blog-detail xcblog-blog-detail-defined">
                      				  				  				<div id="navCategory"> <h5 class="catalogue">目录</h5> <ul class="first_class_ul"> <li>前言</li> <li>副作用渲染函数更新组件的过程</li> <li>核心逻辑：patch流程</li> <ul class="second_class_ul"> <li>1.处理组件</li> <li>2.处理普通元素</li> </ul> <li>总结</li> <ul class="second_class_ul"></ul> </ul> </div> <p class="maodian"></p> <h2>前言</h2> <p>组件渲染的过程，本质上就是把各种把各种类型的 vnode 渲染成真实 DOM。我们也知道了组件是由模板、组件描述对象和数据构成的，数据的变化会影响组件的变化。组件的渲染过程中创建了一个带副作用的渲染函数，当数据变化的时候就会执行这个渲染函数来触发组件的更新。本文我们就具体分析一下组件的更新过程。</p> <p class="maodian"></p> <h2>副作用渲染函数更新组件的过程</h2> <p>我们先来回顾一下带副作用渲染函数 setupRenderEffect 的实现，但是这次我们要重点关注更新组件部分的逻辑：</p> <div class="ay1code"> <pre class="brush:js;">const setupRenderEffect = (instance, initialVNode, container, anchor, parentSuspense, isSVG, optimized) = &gt;{    instance.update = effect(function componentEffect() {      if (!instance.isMounted) {} else {        let {          next,          vnode        } = instance        if (next) {          updateComponentPreRender(instance, next, optimized)        } else {          next = vnode        }        const nextTree = renderComponentRoot(instance) const prevTree = instance.subTree        instance.subTree = nextTree         patch(prevTree, nextTree, hostParentNode(prevTree.el), getNextHostNode(prevTree), instance, parentSuspense, isSVG)         next.el = nextTree.el        }    },  prodEffectOptions)  }</pre> </div> <p>可以看到，更新组件主要做三件事情：<strong>更新组件 vnode 节点、渲染新的子树 vnode、根据新旧子树vnode 执行 patch 逻辑。</strong></p> <p>首先是更新组件 vnode 节点，这里会有一个条件判断，判断组件实例中是否有新的组件 vnode（用next 表示），有则更新组件 vnode，没有 next 指向之前的组件 vnode。为什么需要判断，这其实涉及一个组件更新策略的逻辑，我们稍后会讲。</p> <p>接着是渲染新的子树 vnode，因为数据发生了变化，模板又和数据相关，所以渲染生成的子树 vnode也会发生相应的变化。</p> <p>最后就是核心的 patch 逻辑，用来找出新旧子树 vnode 的不同，并找到一种合适的方式更新 DOM，接下来我们就来分析这个过程。</p> <p class="maodian"></p> <h2>核心逻辑：patch流程</h2> <p>我们先来看 patch 流程的实现代码：</p> <div class="ay1code"> <pre class="brush:js;">const patch = (n1, n2, container, anchor = null, parentComponent = null, parentSuspense = null, isSVG = false, optimized = false) = &gt;{    if (n1 &amp;&amp; !isSameVNodeType(n1, n2)) {      anchor = getNextHostNode(n1) unmount(n1, parentComponent, parentSuspense, true) n1 = null    }    const {      type,      shapeFlag    } = n2    switch (type) {    case Text:      break    case Comment:      break    case Static:      break    case Fragment:      break    default:      if (shapeFlag &amp; 1) {        processElement(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized)      } else if (shapeFlag &amp; 6) {        processComponent(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized)      } else if (shapeFlag &amp; 64) {} else if (shapeFlag &amp; 128) {}    }  }  function isSameVNodeType(n1, n2) {    return n1.type === n2.type &amp;&amp; n1.key === n2.key  }</pre> </div> <p>在这个过程中，首先判断新旧节点是否是相同的 vnode 类型，如果不同，比如一个 div 更新成一个ul，那么最简单的操作就是删除旧的 div 节点，再去挂载新的 ul 节点。</p> <p>如果是相同的 vnode 类型，就需要走 diff 更新流程了，接着会根据不同的 vnode 类型执行不同的处理逻辑，这里我们仍然只分析普通元素类型和组件类型的处理过程。</p> <p class="maodian"></p> <h3>1.处理组件</h3> <p>如何处理组件的呢？举个例子，我们在父组件 App 中里引入了 Hello 组件：</p> <div class="ay1code"> <pre class="brush:js;">&lt;template&gt;    &lt;div&gt;      &lt;p&gt;This is an app.&lt;/p&gt;      &lt;hello :msg="msg"&gt;&lt;/hello&gt;      &lt;button @click="toggle"&gt;Toggle msg&lt;/button&gt;    &lt;/div&gt;  &lt;/template&gt;   &lt;script&gt;  export default {    data () {      return { msg: 'Vue' }    },    methods: {      toggle () {        this.msg = this.msg === 'Vue' ? 'World' : 'Vue'      }    }  }  &lt;/script&gt;</pre> </div> <p>Hello 组件中是 &lt;div&gt;包裹着一个 &lt;p&gt; 标签， 如下所示：</p> <div class="ay1code"> <pre class="brush:js;">&lt;template&gt;    &lt;div&gt;      &lt;p&gt;Hello, {{ msg }}&lt;/p&gt;    &lt;/div&gt;  &lt;/template&gt;   &lt;script&gt;   export default {    props: { msg: String }  }  &lt;/script&gt;</pre> </div> <p>点击 App 组件中的按钮执行 toggle 函数，就会修改 data 中的 msg，并且会触发 App 组件的重新渲染。</p> <p>结合前面对渲染函数的流程分析，这里 App 组件的根节点是 div 标签，重新渲染的子树 vnode 节点是一个普通元素的 vnode，应该先走 processElement 逻辑。组件的更新最终还是要转换成内部真实DOM 的更新，而实际上普通元素的处理流程才是真正做 DOM 的更新，由于稍后我们会详细分析普通元素的处理流程，所以我们先跳过这里，继续往下看。</p> <p>和渲染过程类似，更新过程也是一个树的深度优先遍历过程，更新完当前节点后，就会遍历更新它的子节点，因此在遍历的过程中会遇到 hello 这个组件 vnode 节点，就会执行到 processComponent 处理逻辑中，我们再来看一下它的实现，我们重点关注一下组件更新的相关逻辑：</p> <div class="ay1code"> <pre class="brush:js;">const processComponent = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized) = &gt;{    if (n1 == null) {} else {      updateComponent(n1, n2, parentComponent, optimized)    }  }  const updateComponent = (n1, n2, parentComponent, optimized) = &gt;{    const instance = (n2.component = n1.component) if (shouldUpdateComponent(n1, n2, parentComponent, optimized)) {      instance.next = n2 invalidateJob(instance.update) instance.update()    } else {      n2.component = n1.component n2.el = n1.el    }  }</pre> </div> <p>可以看到，processComponent 主要通过执行 updateComponent 函数来更新子组件，updateComponent 函数在更新子组件的时候，会先执行 shouldUpdateComponent 函数，根据新旧子组件 vnode 来判断是否需要更新子组件。这里你只需要知道，在 shouldUpdateComponent 函数的内部，主要是通过检测和对比组件 vnode 中的 props、chidren、dirs、transiton 等属性，来决定子组件是否需要更新。</p> <p>这是很好理解的，因为在一个组件的子组件是否需要更新，我们主要依据子组件 vnode 是否存在一些会影响组件更新的属性变化进行判断，如果存在就会更新子组件。</p> <p>虽然 Vue.js 的更新粒度是组件级别的，组件的数据变化只会影响当前组件的更新，但是在组件更新的过程中，也会对子组件做一定的检查，判断子组件是否也要更新，并通过某种机制避免子组件重复更新。</p> <p>我们接着看 updateComponent 函数，如果 shouldUpdateComponent 返回 true ，那么在它的最后，先执行 invalidateJob（instance.update）避免子组件由于自身数据变化导致的重复更新，然后又执行了子组件的副作用渲染函数 instance.update 来主动触发子组件的更新。</p> <p>再回到副作用渲染函数中，有了前面的讲解，我们再看组件更新的这部分代码，就能很好地理解它的逻辑了：</p> <div class="ay1code"> <pre class="brush:js;">let {    next,    vnode  } = instance  if (next) {    updateComponentPreRender(instance, next, optimized)  } else {    next = vnode  }  const updateComponentPreRender = (instance, nextVNode, optimized) = &gt;{    nextVNode.component = instance     const prevProps = instance.vnode.props     instance.vnode = nextVNode     instance.next = null     updateProps(instance, nextVNode.props, prevProps, optimized) 		  	    updateSlots(instance, nextVNode.children)  }</pre> </div> <p>结合上面的代码，我们在更新组件的 DOM 前，需要先更新组件 vnode 节点信息，包括更改组件实例的 vnode 指针、更新 props 和更新插槽等一系列操作，因为组件在稍后执行 renderComponentRoot时会重新渲染新的子树 vnode ，它依赖了更新后的组件 vnode 中的 props 和 slots 等数据。</p> <p>所以我们现在知道了一个组件重新渲染可能会有两种场景，一种是组件本身的数据变化，这种情况下next 是 null；另一种是父组件在更新的过程中，遇到子组件节点，先判断子组件是否需要更新，如果需要则主动执行子组件的重新渲染方法，这种情况下 next 就是新的子组件 vnode。</p> <p>你可能还会有疑问，这个子组件对应的新的组件 vnode 是什么时候创建的呢？答案很简单，它是在父组件重新渲染的过程中，通过 renderComponentRoot 渲染子树 vnode 的时候生成，因为子树 vnode是个树形结构，通过遍历它的子节点就可以访问到其对应的组件 vnode。再拿我们前面举的例子说，当App 组件重新渲染的时候，在执行 renderComponentRoot 生成子树 vnode 的过程中，也生成了hello 组件对应的新的组件 vnode。</p> <p>所以 processComponent 处理组件 vnode，本质上就是去判断子组件是否需要更新，如果需要则递归执行子组件的副作用渲染函数来更新，否则仅仅更新一些 vnode 的属性，并让子组件实例保留对组件vnode 的引用，用于子组件自身数据变化引起组件重新渲染的时候，在渲染函数内部可以拿到新的组件vnode。</p> <p>前面也说过，组件是抽象的，组件的更新最终还是会落到对普通 DOM 元素的更新。所以接下来我们详细分析一下组件更新中对普通元素的处理流程。</p> <p class="maodian"></p> <h3>2.处理普通元素</h3> <p>我们再来看如何处理普通元素，我把之前的示例稍加修改，将其中的 Hello 组件删掉，如下所示：</p> <div class="ay1code"> <pre class="brush:js;">&lt;template&gt;    &lt;div&gt;      &lt;p&gt;This is {{msg}}&lt;/p&gt;      &lt;button @click="toggle"&gt;Toggle msg&lt;/button&gt;    &lt;/div&gt;  &lt;/template&gt;   &lt;script&gt;  export default {    data () {      return { msg: 'Vue' }    },    methods: {      toggle () {        this.msg === 'Vue' ? 'World' : 'Vue'      }    }  }    &lt;/script&gt;</pre> </div> <p>当我们点击 App 组件中的按钮会执行 toggle 函数，然后<strong>修改 data 中的 msg，这就触发了 App 组件的重新渲染。</strong></p> <p>App 组件的根节点是 div 标签，重新渲染的子树 vnode 节点是一个普通元素的 vnode，所以应该先走processElement 逻辑，我们来看这个函数的实现：</p> <div class="ay1code"> <pre class="brush:js;">const processElement = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized) = &gt;{    isSVG = isSVG || n2.type === 'svg'    if (n1 == null) {} else {      patchElement(n1, n2, parentComponent, parentSuspense, isSVG, optimized)    }  }  const patchElement = (n1, n2, parentComponent, parentSuspense, isSVG, optimized) = &gt;{    const el = (n2.el = n1.el) const oldProps = (n1 &amp;&amp; n1.props) || EMPTY_OBJ 	 	const newProps = n2.props || EMPTY_OBJ     patchProps(el, n2, oldProps, newProps, parentComponent, parentSuspense, isSVG) const areChildrenSVG = isSVG &amp;&amp; n2.type !== 'foreignObject'    patchChildren(n1, n2, el, null, parentComponent, parentSuspense, areChildrenSVG)  }</pre> </div> <p>可以看到，更新元素的过程主要做两件事情：更新 props 和更新子节点。其实这是很好理解的，因为一个 DOM 节点元素就是由它自身的一些属性和子节点构成的。</p> <p>首先是更新 props，这里的 patchProps 函数就是在更新 DOM 节点的 class、style、event 以及其它的一些 DOM 属性。</p> <p>其次是更新子节点，我们来看一下这里的 patchChildren 函数的实现：</p> <div class="ay1code"> <pre class="brush:js;">const patchChildren = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized = false) = &gt;{    const c1 = n1 &amp;&amp; n1.children const prevShapeFlag = n1 ? n1.shapeFlag: 0 const c2 = n2.children const {      shapeFlag    } = n2    if (shapeFlag &amp; 8) {      if (prevShapeFlag &amp; 16) {        unmountChildren(c1, parentComponent, parentSuspense)      }      if (c2 !== c1) {        hostSetElementText(container, c2)      }    } else {      if (prevShapeFlag &amp; 16) {        if (shapeFlag &amp; 16) {          patchKeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, optimized)        } else {          unmountChildren(c1, parentComponent, parentSuspense, true)        }      } else {        if (prevShapeFlag &amp; 8) {          hostSetElementText(container, '')        }        if (shapeFlag &amp; 16) {          mountChildren(c2, container, anchor, parentComponent, parentSuspense, isSVG, optimized)        }      }    }  }</pre> </div> <p>对于一个元素的子节点 vnode 可能会有三种情况：纯文本、vnode 数组和空。那么根据排列组合对于新旧子节点来说就有九种情况，我们可以通过三张图来表示。</p> <p>首先来看一下旧子节点是纯文本的情况：</p> <ul> <li>如果新子节点也是纯文本，那么做简单地文本替换即可；</li> <li>如果新子节点是空，那么删除旧子节点即可；</li> <li>如果新子节点是 vnode 数组，那么先把旧子节点的文本清空，再去旧子节点的父容器下添加多个新子节点。</li> </ul> <p style="text-align:center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220427/47f4fe2ecfd4eb0a648e8b644df4e827.jpg"></p> <p>接下来看一下旧子节点是空的情况：</p> <ul> <li>如果新子节点是纯文本，那么在旧子节点的父容器下添加新文本节点即可；</li> </ul> <ul> <li>如果新子节点也是空，那么什么都不需要做；</li> </ul> <ul> <li>如果新子节点是 vnode 数组，那么直接去旧子节点的父容器下添加多个新子节点即可。</li> </ul> <p style="text-align:center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220427/a0c5be21badc666100c43e82dcc5e2e1.jpg"></p> <p>最后来看一下旧子节点是 vnode 数组的情况：</p> <ul> <li>如果新子节点是纯文本，那么先删除旧子节点，再去旧子节点的父容器下添加新文本节点；</li> <li>如果新子节点是空，那么删除旧子节点即可；</li> <li>如果新子节点也是 vnode 数组，那么就需要做完整的 diff 新旧子节点了，这是最复杂的情况，内部运用了核心 diff 算法。</li> </ul> <p style="text-align:center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220427/196dcca349222eae0823711d1081a39f.jpg"></p> <p class="maodian"></p> <h2>总结</h2> 			                </div>
                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-108556.htm">南京猫咪领养吧百度贴吧（南京猫猫领养中心）</a></p>
                                        <p>下一个：<a href="/news/article-109400.htm">挪威人养什么宠物（挪威人喜欢什么动物）</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-95399.htm" title="宠颐生动物医院简介 宠颐生动物医院官网">宠颐生动物医院简介 宠颐生动物医院官网</a></li>
                        <li class="py-2"><a href="/news/article-110246.htm" title="狂犬疫苗动物提取和人提取（狂犬疫苗动物提取和人提取细胞有什么区别）">狂犬疫苗动物提取和人提取（狂犬疫苗动物提取和人提取细胞有什么区别）</a></li>
                        <li class="py-2"><a href="/news/article-87252.htm" title="家用狗粮制作机器哪种好（家用狗粮制作机器哪种好用）">家用狗粮制作机器哪种好（家用狗粮制作机器哪种好用）</a></li>
                        <li class="py-2"><a href="/news/article-99846.htm" title="动物医学专业社会实践报告（动物医学专业社会实践报告范文）">动物医学专业社会实践报告（动物医学专业社会实践报告范文）</a></li>
                        <li class="py-2"><a href="/news/article-94640.htm" title="全国动物疫苗生产厂家有哪些公司上市（中国动物疫苗厂家排名）">全国动物疫苗生产厂家有哪些公司上市（中国动物疫苗厂家排名）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-4-20-free-node-subscribe.htm" title="4月20日→19.5M/S|2025年最新免费节点Shadowrocket/Clash/SSR/V2ray订阅链接地址">4月20日→19.5M/S|2025年最新免费节点Shadowrocket/Clash/SSR/V2ray订阅链接地址</a></li>
                        <li class="py-2"><a href="/news/article-99847.htm" title="小猫养多久会认主人家（小猫多长时间认家）">小猫养多久会认主人家（小猫多长时间认家）</a></li>
                        <li class="py-2"><a href="/news/article-100601.htm" title="win10查看电脑保存过的wifi密码">win10查看电脑保存过的wifi密码</a></li>
                        <li class="py-2"><a href="/news/article-97585.htm" title="南京宠物领养中心有哪些公司名称（南京宠物领养机构）">南京宠物领养中心有哪些公司名称（南京宠物领养机构）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-4-12-node-share.htm" title="4月12日→18.3M/S|2025年最新免费节点SSR/Shadowrocket/Clash/V2ray订阅链接地址">4月12日→18.3M/S|2025年最新免费节点SSR/Shadowrocket/Clash/V2ray订阅链接地址</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">12</span> <a href="/date/2025-05/" title="2025-05 归档">2025-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">85</span> <a href="/date/2025-04/" title="2025-04 归档">2025-04</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </section>
        <footer class="ftco-footer ftco-section">
        <div class="container">
            <div class="row">
                <div class="mouse">
                    <a href="#" class="mouse-icon">
                        <div class="mouse-wheel"><span class="ion-ios-arrow-up"></span></div>
                    </a>
                </div>
            </div>
            <div class="row">
                <div class="col-md-12 text-center">
                                        <p>
                                                <a href="/">首页</a> |
                                                <a href="/free-nodes/">免费节点</a> |
                                                <a href="/paid-subscribe/">推荐机场</a> |
                                                <a href="/client.htm">客户端</a> |
                                                <a href="/news/">新闻资讯</a> |
                                                <a href="/about-us.htm">关于我们</a> |
                        <a href="/disclaimer.htm">免责申明</a> |
                        <a href="/privacy.htm">隐私申明</a> |
                        <a href="/sitemap.xml">网站地图</a>
                    </p>
                    <p>
                        <a href="/">NodeFreeV2ray免费机场节点分享官网</a> 版权所有
                    </p>
                </div>
            </div>
        </div>
    </footer>
    <!-- loader -->
    <div id="ftco-loader" class="show fullscreen">
        <svg class="circular" width="48px" height="48px">
            <circle class="path-bg" cx="24" cy="24" r="22" fill="none" stroke-width="4" stroke="#eeeeee"></circle>
            <circle class="path" cx="24" cy="24" r="22" fill="none" stroke-width="4" stroke-miterlimit="10" stroke="#F96D00"></circle>
        </svg>
    </div>
    <script src="/assets/website/js/frontend/nodefreev2ray/jquery.min.js"></script>
    <script src="/assets/website/js/frontend/nodefreev2ray/jquery-migrate-3.0.1.min.js"></script>
    <script src="/assets/website/js/frontend/nodefreev2ray/popper.min.js"></script>
    <script src="/assets/website/js/frontend/nodefreev2ray/bootstrap.min.js"></script>
    <script src="/assets/website/js/frontend/nodefreev2ray/jquery.easing.1.3.js"></script>
    <script src="/assets/website/js/frontend/nodefreev2ray/jquery.waypoints.min.js"></script>
    <script src="/assets/website/js/frontend/nodefreev2ray/jquery.stellar.min.js"></script>
    <script src="/assets/website/js/frontend/nodefreev2ray/owl.carousel.min.js"></script>
    <script src="/assets/website/js/frontend/nodefreev2ray/jquery.magnific-popup.min.js"></script>
    <script src="/assets/website/js/frontend/nodefreev2ray/aos.js"></script>
    <script src="/assets/website/js/frontend/nodefreev2ray/jquery.animateNumber.min.js"></script>
    <script src="/assets/website/js/frontend/nodefreev2ray/bootstrap-datepicker.js"></script>
    <script src="/assets/website/js/frontend/nodefreev2ray/scrollax.min.js"></script>
    <script src="/assets/website/js/frontend/nodefreev2ray/google-map.js"></script>
    <script src="/assets/website/js/frontend/nodefreev2ray/main.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>